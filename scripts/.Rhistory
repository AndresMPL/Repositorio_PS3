train <-  kNN(train, variable = c("surface_total", "surface_covered", "bedrooms", "bathrooms","rooms"), k = 6)
library(caret)
train <-  kNN(train, variable = c("surface_total", "surface_covered", "bedrooms", "bathrooms","rooms"), k = 6)
library(class)
train <-  kNN(train, variable = c("surface_total", "surface_covered", "bedrooms", "bathrooms","rooms"), k = 6)
#Imputamos las variables surface_total, surfaced_covered, bedrooms, bathrooms, rooms
p_load(ggplot2, boot, lessR, readr, readxl, ggplot2, ggthemes, VIM, tidyverse, rvest, heatmaply, plyr, dplyr, stargazer, knitr, kableExtra, here, jtools, ggstance, broom, broom.mixed, skimr, tydir, zoo, psych, lubridate)
p_load(tidyverse, rio, sf, dplyr, osmdata, leaflet, scales, stargazer,rstudioapi,
rio, plotly, modeldata, rgeos, tmaptools, IRdisplay, spatialsample, geojsonio)
library(pacman)
p_load(tidyverse, rio, sf, dplyr, osmdata, leaflet, scales, stargazer,rstudioapi,
rio, plotly, modeldata, rgeos, tmaptools, IRdisplay, spatialsample, geojsonio)
rm(list=ls())
test   <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/test.csv")
train  <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/train.csv")
glimpse(test)
glimpse(train) #Las dos BD de Train y Test tienen las mismas variables
train <- train %>% mutate(latp=lat,longp=lon, ln_price = log(price))
train <- sf::st_as_sf(train,coords=c('longp','latp'),crs = 4686)
class(train)
head(train)
sapply(train, function(x) sum(is.na(x))) %>% as.data.frame()  #Revisamos los NA de las variables
train <-  kNN(train, variable = c("surface_total", "surface_covered", "bedrooms", "bathrooms","rooms"), k = 6)
#Imputamos las variables surface_total, surfaced_covered, bedrooms, bathrooms, rooms
p_load(ggplot2, boot, lessR, readr, readxl, ggplot2, ggthemes, VIM, tidyverse, rvest, heatmaply, plyr, dplyr, stargazer, knitr, kableExtra, here, jtools, ggstance, broom, broom.mixed, skimr, tydir, zoo, psych, lubridate)
train <-  kNN(train, variable = c("surface_total", "surface_covered", "bedrooms", "bathrooms","rooms"), k = 6)
train$bedrooms
train <-  kNN(train, variable = c("bedrooms", "bathrooms","rooms"), k = 6)
train$bathrooms
train$rooms
train <-  kNN(train, variable = c("bedrooms", "bathrooms","rooms"), k = 6)
train <-  kNN(train, variable = c("bedrooms", "bathrooms","rooms"), k = 3)
train <-  kNN(train, variable "bedrooms", k = 3)
train <-  kNN(train, variable= "bedrooms", k = 3)
train <-  kNN(train, variable= c("bedrooms"), k = 3)
train <-  kNN(train, variable= c("bedrooms","bathrooms"), k = 3)
train <-  kNN(train, variable= c("surface_total"), k = 6)
train <-  kNN(train, variable= c("surface_covered"), k = 6)
train <-  kNN(train, variable= c("surface_total"), k = 6)
train <-  kNN(train, variable= "surface_total", k = 6)
test   <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/test.csv")
train  <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/train.csv")
glimpse(test)
glimpse(train) #Las dos BD de Train y Test tienen las mismas variables
train <- train %>% mutate(latp=lat,longp=lon, ln_price = log(price))
train <- sf::st_as_sf(train,coords=c('longp','latp'),crs = 4686)
class(train)
head(train)
train <-  kNN(train, variable= "surface_total", k = 6)
train$surface_total
filtro <- is.na(train$surface_total)
sum(filtro)
train$surface_total[filtro] <- mean(train$surface_total, na.rm = T)
filtro <- is.na(train$surface_covered) #Trasnsformamos los NA a ceros
sum(filtro)
train$surface_covered[filtro] <- mean(train$surface_covered, na.rm = T)
filtro <- is.na(train$bedrooms) #Trasnsformamos los NA a ceros #REVISAR
sum(filtro)
train$bedrooms[filtro] <- mean(train$bedrooms, na.rm = T)
train$bedrooms
filtro <- is.na(train$bathrooms) #Trasnsformamos los NA a ceros #REVISAR
sum(filtro)
train$bathrooms[filtro] <- mean(train$bathrooms, na.rm = T)
filtro <- is.na(train$rooms) #Trasnsformamos los NA a ceros #REVISAR
sum(filtro)
train$rooms[filtro] <- mean(train$rooms, na.rm = T)
filtro <- is.na(train$lat) | is.na(train$lon) #| is.na(train$rooms) | is.na(train$bathrooms) #| is.na(train$surface_total) | is.na(train$surface_covered)
train <- train[!filtro, ] #Filtramos los registros sin lat y lon
limites <- getbb("Bogota Colombia") #Aseguramos que sean inmuebles en Bogotá
filtro1 <- between(train$lon, limites[1, "min"], limites[1, "max"])
filtro2 <- between(train$lat, limites[2, "min"], limites[2, "max"])
filtro <- filtro1 & filtro2
train <- train[filtro,]
train <- train %>% mutate(area_maxima = ifelse(surface_total>surface_covered, surface_total, surface_covered)) #Seleccionamos el área máxima
sapply(train, function(x) sum(is.na(x))) %>% as.data.frame() #Revisamos los NA de las variables
prop.table(table(train$area_maxima == 0)) %>% as.data.frame() #Existen muchos lugares sin área (TRUE)
table(train$area_maxima == 0) %>% as.data.frame()
table(train$property_type) %>% as.data.frame() #Distribución entre Casas y Apartamentos
train$property_type <- as.factor(train$property_type) #Transformamos la variable de propiedad como factor
table(train$operation_type) %>% as.data.frame() #Validamos que todo corresponde a Venta
glimpse(train)
p_load(SuperLearner, caret)
set.seed(1011)
inTrain <- createDataPartition(y = train$price, p = .7, list = FALSE)
p_load(SuperLearner, caret)
library(pacman)
setwd("C:/Users/User/Documents/Big_Data/BD_Taller 3")
p_load(tidyverse, rio, sf, dplyr, osmdata, leaflet, scales, stargazer,rstudioapi,
rio, plotly, modeldata, rgeos, tmaptools, IRdisplay, spatialsample, geojsonio)
rm(list=ls())
test   <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/test.csv")
train  <- import("https://raw.githubusercontent.com/AndresMPL/Repositorio_PS3/main/datasets/train.csv")
glimpse(test)
glimpse(train) #Las dos BD de Train y Test tienen las mismas variables
est_prev <- train %>% select(price, surface_total, surface_covered, rooms, bedrooms, bathrooms) %>% as.data.frame()
stargazer(round(est_prev), digits = 4, title="Tabla de Estadísticas descriptivas", type='text')
sapply(train, function(x) sum(is.na(x))) %>% as.data.frame()  #Revisamos los NA de las variables
#Vamos a sacar los metros cuadrados a partir de la descripción de las propiedades
p_load(tm, tidytext)
id<-train$property_id
descripcion <- train$description
titulo <- train$title
df<-data.frame(id,descripcion,titulo)
train$descripcion <- removePunctuation(train$description)
train$descripcion <- tolower(train$description)
train$descripcion <- stripWhitespace(train$description)
bigrams <- train %>% ungroup() %>%
unnest_tokens(bigram, descripcion, token = "ngrams", n = 2)
head(bigrams)
descripcion_keep <- c("mts2", "m", "mts", "metros", "m2", "mt2")
bigrams_keep <- data.frame(word2 = descripcion_keep)
bigrams2 <- bigrams %>% ungroup() %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
semi_join(bigrams_keep, by = "word2") %>%
unite(bigram, word1, sep = " ")
head(bigrams2)
train2 <- bigrams2 %>% select(-c("word2"))
colnames(train2)
train2 <- transform(train2,bigram = as.numeric(bigram))
sapply(train2, function(x) sum(is.na(x))) %>% as.data.frame()  #Revisamos los NA de las variables
filtro <- is.na(train2$bigram) #Transformamos los NA a ceros
sum(filtro)
train2$bigram[filtro] <- 0
train2 <- train2 %>% rename(mts2=bigram)
library(tokenizers)
train2$parqueadero <- tokenize_words(train2$description)
descripcion_keep2 <- c("parqueadero?", "garaje?")
train2$parqueadero <- as.logical(grepl(paste(descripcion_keep2, collapse = "|"), train2$parqueadero))
train2$parqueadero <- as.integer(as.logical(train2$parqueadero))
train_area <- train2 %>% select(property_id, mts2, parqueadero)
train_area2 <- train_area %>% group_by(property_id) %>% slice(1)
train <- left_join(train, train_area2)
#Verificamos que los datos no hayan cambiado
est_prev <- train %>% select(price, surface_total, surface_covered, rooms, bedrooms, bathrooms) %>% as.data.frame()
stargazer(round(est_prev), digits = 4, title="Tabla de Estadísticas descriptivas", type='text')
sapply(train, function(x) sum(is.na(x))) %>% as.data.frame()  #Revisamos los NA de las variables
train <- train %>% mutate(latp=lat,longp=lon, ln_price = log(price))
train <- sf::st_as_sf(train,coords=c('longp','latp'),crs = 4686)
class(train)
head(train)
bogota_polig <- getbb(place_name = "Bogotá",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
centroide_bta <- gCentroid(as(bogota_polig$geometry, "Spatial"), byid = T)
localidades <- st_read("datos/localidades")
p_load(SuperLearner, caret)
set.seed(1011)
inTrain <- createDataPartition(y = train$price, p = .7, list = FALSE)
train_7 <- train[ inTrain,]
test_3  <- train[-inTrain,]
glimpse(train)
##Regresion 1----
reg1 <- lm(price~distancia_parque+distancia_museo+distancia_ips+distancia_ese +distancia_colegios+distancia_cai+
distancia_best+distancia_centrof+distancia_cuadrantes+distancia_buses+distancia_tm+
total_eventos_2022, data = train_7)
parques <-st_read("datos/parques")
museos <-st_read("datos/museos")
train_sf <- st_as_sf(train, coords = c("lon", "lat"))
train_sf <- st_transform(train_sf,4686)
head(train)
head(train_sf)
centroides_parques_d <- st_as_sf(centroides_parques, coords = c("x", "y"))
parques <-st_read("dataset/parques")
parques <-st_read("../datasets/parques")
museos <-st_read("../datasets/museos")
ips <-st_read("../datasets/ips")
ese <-st_read("../datasets/ese")
colegios <-st_read("../datasets/colegios")
cai <-st_read("../datasets/cai")
biblioestacion <-st_read("../datasets/bibloestacion")
centro_financiero <-st_read("../datasets/centro_financiero")
delitos <-st_read("../datasets/delitos")
cuadrantepolicia <-st_read("../datasets/cuadrantepolicia")
estratos <-st_read("../datasets/estrato")
delitos <- delitos %>% mutate(total_eventos_2022 = CMH22CONT+CMLP22CONT+CMHP22CONT+CMHR22CONT+CMHA22CONT+CMHB22CONT+
CMHCE22CON+CMHM22CONT+CMHC22CONT+CMDS22CONT+CMVI22CONT)
delitos <- delitos %>% filter(total_eventos_2022 > 0)
delitos <- delitos %>% select(CMNOMLOCAL, total_eventos_2022, geometry) #Nos quedamos solo con estos tres datos para unirlos a la BD Train-Test
train <- st_join(train, delitos) #En cada inmueble agregamos el número de delitos de la localidad
chapinero <- getbb(place_name = "UPZ Chapinero, Bogotá",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
bogota <- getbb(place_name = "Bogotá",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
bogota <- st_transform(bogota, 4686)
bogota_mapa <- opq(bbox = getbb("Bogotá Colombia"))
#Parques
parques <- st_transform(parques,4686)
sf_parques = parques %>% st_sf
#Museos
museos <- st_transform(museos,4686)
sf_museos = museos %>% st_sf
#IPS
ips <- st_transform(ips,4686)
sf_ips = ips %>% st_sf
#ESE
ese <- st_transform(ese,4686)
sf_ese = ese %>% st_sf
#Colegios
colegios <- st_transform(colegios,4686)
sf_colegios = colegios %>% st_sf
#CAI
cai <- st_transform(cai,4686)
sf_cai = cai %>% st_sf
#Biblioestacion
biblioestacion <- st_transform(biblioestacion,4686)
sf_biblioestacion = biblioestacion %>% st_sf
#Centro financiero
centro_financiero <- st_transform(centro_financiero,4686)
sf_centro_financiero = centro_financiero %>% st_sf
#Cuadrantes Policia
centro_cuadrantepolicia <- st_transform(cuadrantepolicia,4686)
sf_centro_cuadrantepolicia = centro_cuadrantepolicia %>% st_sf
buses <- bogota_mapa %>% add_osm_feature(key="highway",value="bus_stop") %>% osmdata_sf()
buses_puntos <- buses$osm_points
estaciones_tm <- bogota_mapa %>% add_osm_feature(key="amenity", value = "bus_station") %>% osmdata_sf()
estaciones_tm_puntos <- estaciones_tm$osm_points
delitos <- st_transform(delitos,4686)
sf_delitos = delitos %>% st_sf
centroides_parques  <- gCentroid(as(sf_parques$geometry, "Spatial"), byid = T)
centroides_museos   <- gCentroid(as(sf_museos$geometry, "Spatial"), byid = T)
centroides_ips      <- gCentroid(as(sf_ips$geometry, "Spatial"), byid = T)
centroides_ese      <- gCentroid(as(sf_ese$geometry, "Spatial"), byid = T)
centroides_colegios <- gCentroid(as(sf_colegios$geometry, "Spatial"), byid = T)
centroides_cai      <- gCentroid(as(sf_cai$geometry, "Spatial"), byid = T)
centroides_best     <- gCentroid(as(sf_biblioestacion$geometry, "Spatial"), byid = T)
centroides_centrof  <- gCentroid(as(sf_centro_financiero$geometry, "Spatial"), byid = T)
centroides_cuadrantes  <- gCentroid(as(sf_centro_cuadrantepolicia$geometry, "Spatial"), byid = T)
leaflet() %>%
addTiles() %>%
addPolygons(data=bogota, color = "#5CACEE", opacity = 0.4) %>%
addCircles(data=train, radius = 0.1, color = "#DAA520", opacity = 2) %>%
addPolygons(data=chapinero, color = "#008B45", opacity = 0.4) #%>%
train_sf <- st_as_sf(train, coords = c("lon", "lat"))
train_sf <- st_transform(train_sf,4686)
head(train)
head(train_sf)
centroides_parques_d <- st_as_sf(centroides_parques, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_parques_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_parque <- dist_min
train_sf$distancia_parque <- dist_min
centroides_museos_d <- st_as_sf(centroides_museos, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_museos_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_museo <- dist_min
train_sf$distancia_museo <- dist_min
centroides_ips_d <- st_as_sf(centroides_ips, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_ips_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_ips <- dist_min
train_sf$distancia_ips <- dist_min
centroides_ese_d <- st_as_sf(centroides_ese, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_ese_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_ese <- dist_min
train_sf$distancia_ese <- dist_min
centroides_colegios_d <- st_as_sf(centroides_colegios, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_colegios_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_colegios <- dist_min
train_sf$distancia_colegios <- dist_min
centroides_cai_d <- st_as_sf(centroides_cai, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_cai_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_cai <- dist_min
train_sf$distancia_cai <- dist_min
centroides_best_d <- st_as_sf(centroides_best, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_best_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_best <- dist_min
train_sf$distancia_best <- dist_min
centroides_centrof_d <- st_as_sf(centroides_centrof, coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_centrof_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_centrof <- dist_min
train_sf$distancia_centrof <- dist_min
centroides_cuadrantes_d  <- st_as_sf(centroides_cuadrantes , coords = c("x", "y"))
dist_matrix <- st_distance(x = train_sf, y = centroides_cuadrantes_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_cuadrantes <- dist_min
train_sf$distancia_cuadrantes <- dist_min
buses_puntos_d <- st_as_sf(buses_puntos, coords = c("x", "y"))
st_crs(buses_puntos_d) <- 4686
dist_matrix <- st_distance(x = train_sf, y = buses_puntos_d)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_buses <- dist_min
train_sf$distancia_buses <- dist_min
centroides_tm <- st_as_sf(estaciones_tm_puntos, coords = c("x", "y"))
st_crs(centroides_tm) <- 4686
dist_matrix <- st_distance(x = train_sf, y = centroides_tm)
dist_min <- apply(dist_matrix, 1, min)
train$distancia_tm <- dist_min
train_sf$distancia_tm <- dist_min
glimpse(train)
estadisticas2 <- train %>% select(price, surface_total, surface_covered, rooms, bedrooms, bathrooms,
distancia_parque, distancia_museo, distancia_ips, distancia_ese,
distancia_colegios, distancia_cai, distancia_best, distancia_centrof,
distancia_cuadrantes, distancia_buses, distancia_tm, mts2, surface_total_imp,
surface_covered_imp, bedrooms_imp, bathrooms_imp, rooms_imp) %>% as.data.frame()
set.seed(1011)
inTrain <- createDataPartition(y = train$price, p = .7, list = FALSE)
train_7 <- train[ inTrain,]
test_3  <- train[-inTrain,]
glimpse(train)
##Regresion 1----
reg1 <- lm(price~distancia_parque+distancia_museo+distancia_ips+distancia_ese +distancia_colegios+distancia_cai+
distancia_best+distancia_centrof+distancia_cuadrantes+distancia_buses+distancia_tm+
total_eventos_2022, data = train_7)
stargazer(reg1, type = "text", dep.var.labels = "Precio de venta", digits = 4)
summary(reg1)
test_3$y_hat1 <- predict(reg1, newdata = test_3)
MAE_model1 <- with(test_3, mean(abs(price - y_hat1))) #Calculating the MAE
MAE_model1
##Regresion 2----
reg2 <- lm(price~surface_total+surface_covered+rooms+bedrooms+bathrooms+property_type+area_maxima+
distancia_parque+distancia_museo+distancia_ips+distancia_ese+distancia_colegios+distancia_cai+
distancia_best+distancia_centrof+distancia_cuadrantes+distancia_buses+distancia_tm+
total_eventos_2022, data = train_7)
stargazer(reg2, type = "text", dep.var.labels = "Precio de venta", digits = 4)
summary(reg2)
test_3$y_hat2 <- predict(reg2, newdata = test_3)
MAE_model2 <- with(test_3, mean(abs(price - y_hat2))) #Calculating the MSE
MAE_model2
MAE_model1
